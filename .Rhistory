ggplot(data, aes(x = impact_p2, y = impact_a2)) +
geom_point(alpha = 0.6, color = "green") +
labs(title = "Scatter Plot of Impact P2 vs Impact A2",
x = "Impact P2",
y = "Impact A2") +
theme_minimal()
# Generate the scatter plot for the new variables
ggplot(data, aes(x = impact_p1, y = impact_a1)) +
geom_point(alpha = 0.6, color = "blue") +
labs(title = "Scatter Plot of Impact P1 vs Impact A1",
x = "Impact P1",
y = "Impact A1") +
theme_minimal()
ggplot(data, aes(x = impact_p2, y = impact_p1)) +
geom_point(alpha = 0.6, color = "green") +
labs(title = "Scatter Plot of Impact P2 vs Impact A2",
x = "Impact P2",
y = "Impact A2") +
theme_minimal()
ggplot(data, aes(x = impact_a2, y = impact_a1)) +
geom_point(alpha = 0.6, color = "green") +
labs(title = "Scatter Plot of Impact P2 vs Impact A2",
x = "Impact P2",
y = "Impact A2") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Number of observations
n <- 10000
# Generate right-skewed distribution for impact_p1 and impact_a1
impact_p1 <- rexp(n, rate = 1/150) + rgamma(n, shape = 2, scale = 50)
impact_a1 <- rexp(n, rate = 1/300) + rgamma(n, shape = 1.5, scale = 70)
# Generate impact_p2 based on impact_p1 with strong correlation (r ~ 0.8)
impact_p2 <- 0.8 * impact_p1 + rnorm(n, mean = 0, sd = 100)
# Generate impact_a2 based on impact_a1 with strong correlation (r ~ 0.8)
impact_a2 <- 0.8 * impact_a1 + rnorm(n, mean = 0, sd = 100)
# Add noise and scale the values to range between 0 and 1000
impact_p1 <- scale(impact_p1 + rnorm(n, mean = 30, sd = 40), center = FALSE, scale = max(impact_p1)) * 1000
impact_a1 <- scale(impact_a1 + rnorm(n, mean = 50, sd = 25), center = FALSE, scale = max(impact_a1)) * 1000
impact_p2 <- scale(impact_p2 + rnorm(n, mean = 25, sd = 35), center = FALSE, scale = max(impact_p2)) * 1000
impact_a2 <- scale(impact_a2 + rnorm(n, mean = 55, sd = 20), center = FALSE, scale = max(impact_a2)) * 1000
# Ensure values are within the 0-1000 range and convert to integer
impact_p1 <- as.integer(pmin(pmax(impact_p1, 0), 1000))
impact_a1 <- as.integer(pmin(pmax(impact_a1, 0), 1000))
impact_p2 <- as.integer(pmin(pmax(impact_p2, 0), 1000))
impact_a2 <- as.integer(pmin(pmax(impact_a2, 0), 1000))
# Generate the 'group' variable with specified proportions
group <- c(rep("Obs.", 5000), rep("Exp.", 3500), rep(NA, 1500))
# Shuffle the group variable to mix the groups
group <- sample(group, n, replace = FALSE)
# Create a data frame
data <- data.frame(
impact_p1 = impact_p1,
impact_a1 = impact_a1,
impact_p2 = impact_p2,
impact_a2 = impact_a2,
group = group
)
# Calculate the correlations
correlation_p1_p2 <- cor(data$impact_p1, data$impact_p2)
correlation_a1_a2 <- cor(data$impact_a1, data$impact_a2)
# Print the correlation values
print(paste("Correlation between impact_p1 and impact_p2:", correlation_p1_p2))
print(paste("Correlation between impact_a1 and impact_a2:", correlation_a1_a2))
# Generate the scatter plot for the new variables
ggplot(data, aes(x = impact_p1, y = impact_a1)) +
geom_point(alpha = 0.6, color = "blue") +
labs(title = "Scatter Plot of Impact P1 vs Impact A1",
x = "Impact P1",
y = "Impact A1") +
theme_minimal()
ggplot(data, aes(x = impact_p2, y = impact_a2)) +
geom_point(alpha = 0.6, color = "green") +
labs(title = "Scatter Plot of Impact P2 vs Impact A2",
x = "Impact P2",
y = "Impact A2") +
theme_minimal()
ggplot(data, aes(x = impact_p2, y = impact_p1)) +
geom_point(alpha = 0.6, color = "purple") +
labs(title = "Scatter Plot of Impact P2 vs Impact P1",
x = "Impact P2",
y = "Impact P1") +
theme_minimal()
ggplot(data, aes(x = impact_a2, y = impact_a1)) +
geom_point(alpha = 0.6, color = "orange") +
labs(title = "Scatter Plot of Impact A2 vs Impact A1",
x = "Impact A2",
y = "Impact A1") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Number of observations
n <- 10000
# Generate right-skewed distribution for impact_p1 and impact_a1
impact_p1 <- rexp(n, rate = 1/150) + rgamma(n, shape = 2, scale = 50)
impact_a1 <- rexp(n, rate = 1/300) + rgamma(n, shape = 1.5, scale = 70)
# Generate impact_p2 based on impact_p1 with strong correlation (r ~ 0.8)
impact_p2 <- 0.8 * impact_p1 + rnorm(n, mean = 0, sd = 100)
# Generate impact_a2 based on impact_a1 with strong correlation (r ~ 0.8)
impact_a2 <- 0.8 * impact_a1 + rnorm(n, mean = 0, sd = 100)
# Add noise and scale the values to range between 0 and 1000
impact_p1 <- scale(impact_p1 + rnorm(n, mean = 30, sd = 40), center = FALSE, scale = max(impact_p1)) * 1000
impact_a1 <- scale(impact_a1 + rnorm(n, mean = 50, sd = 25), center = FALSE, scale = max(impact_a1)) * 1000
impact_p2 <- scale(impact_p2 + rnorm(n, mean = 25, sd = 35), center = FALSE, scale = max(impact_p2)) * 1000
impact_a2 <- scale(impact_a2 + rnorm(n, mean = 55, sd = 20), center = FALSE, scale = max(impact_a2)) * 1000
# Ensure values are within the 0-1000 range and convert to integer
impact_p1 <- as.integer(pmin(pmax(impact_p1, 0), 1000))
impact_a1 <- as.integer(pmin(pmax(impact_a1, 0), 1000))
impact_p2 <- as.integer(pmin(pmax(impact_p2, 0), 1000))
impact_a2 <- as.integer(pmin(pmax(impact_a2, 0), 1000))
# Generate the 'group' variable with specified proportions
group <- c(rep("Obs.", 5000), rep("Exp.", 3500), rep(NA, 1500))
# Shuffle the group variable to mix the groups
group <- sample(group, n, replace = FALSE)
# Create a data frame
data <- data.frame(
impact_p1 = impact_p1,
impact_a1 = impact_a1,
impact_p2 = impact_p2,
impact_a2 = impact_a2,
group = group
)
# Calculate the correlations
correlation_p1_p2 <- cor(data$impact_p1, data$impact_p2)
correlation_a1_a2 <- cor(data$impact_a1, data$impact_a2)
# Print the correlation values
print(paste("Correlation between impact_p1 and impact_p2:", correlation_p1_p2))
print(paste("Correlation between impact_a1 and impact_a2:", correlation_a1_a2))
# Generate the scatter plot for the new variables
ggplot(data, aes(x = impact_p1, y = impact_a1)) +
geom_point(alpha = 0.6, color = "blue") +
labs(title = "Scatter Plot of Impact P1 vs Impact A1",
x = "Impact P1",
y = "Impact A1") +
theme_minimal()
ggplot(data, aes(x = impact_p2, y = impact_a2)) +
geom_point(alpha = 0.6, color = "green") +
labs(title = "Scatter Plot of Impact P2 vs Impact A2",
x = "Impact P2",
y = "Impact A2") +
theme_minimal()
ggplot(data, aes(x = impact_p2, y = impact_p1)) +
geom_point(alpha = 0.6, color = "purple") +
labs(title = "Scatter Plot of Impact P2 vs Impact P1",
x = "Impact P2",
y = "Impact P1") +
theme_minimal()
ggplot(data, aes(x = impact_a2, y = impact_a1)) +
geom_point(alpha = 0.6, color = "orange") +
labs(title = "Scatter Plot of Impact A2 vs Impact A1",
x = "Impact A2",
y = "Impact A1") +
theme_minimal()
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Interactive Plotly Scatter Plot"),
sidebarLayout(
sidebarPanel(
selectInput("xaxis", "Select X-Axis Variable:",
choices = list("Impact P1" = "impact_p1",
"Impact P2" = "impact_p2")),
selectInput("yaxis", "Select Y-Axis Variable:",
choices = list("Impact A1" = "impact_a1",
"Impact A2" = "impact_a2"))
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Load necessary library
install.packages("shiny")
install.packages("plotly")
install.packages("ggplot2")
library(shiny)
library(plotly)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(shiny); runApp('C:/Users/ru38fed/LRZ Sync+Share/PhD/12_Dissertation/0_Rahmenkapitel/impact_analysis/demo/demo.R')
install.packages(c("rmarkdown", "knitr"))
load("C:/Users/ru38fed/LRZ Sync+Share/PhD/06_Workshops_Conferences/25_01_München_Choice_Experimente/02 – Estimation of Experimental Design/2_DCE_Workspace.RData")
# Install and load package "idefix"
install.packages("idefix")
library("idefix")
install.packages("shiny")
library("shiny")
install.packages("shiny")
print(3 * 3 * 4 * 2 * 3 * 3)
# Vector:
## - number of elements is the number of attributes
## - values contain number of levels of each attribute
at.lvls <- c(3, 3, 4, 2, 3, 3)
c.type <- c("D", "D", "D", "D", "D", "D")
c.type <- c("D", "D", "D", "D", "D", "D")
# Full factorial
Profiles(lvls = at.lvls, coding = c.type)
Profiles(lvls = at.lvls, coding = c.type)
# ------------------------------------------------- #
# Workshop Choice Experiments
# Estimation of DCEs with R
#
# Dave Balzer, Jürgen Schiener
# 20.01.2025
# ------------------------------------------------- #
# Install and load package "idefix"
install.packages("idefix")
library("idefix")
install.packages("shiny")
library("shiny")
# ------------------------------------------------- #
# Design with 6 attributes
# ------------------------------------------------- #
# Attribute	        Level
# ---------------------------------------
# Type of housing	  1. Single apartment
#                   2. Shared flat for 2
#                   3. Shares flat for 4
# ---------------------------------------
# Living space	    1. 15 m^2
#                   2. 20 m^2
#                   3. 25 m^2
# ---------------------------------------
# Rent	            1. 300€
#                   2. 350€
#                   3. 400€
#                   4. 450€
# ---------------------------------------
# Indiv. Bathroom	  1. No (shared)
#                   2. Yes (used individually)
# ---------------------------------------
# Travel to uni	    1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# Travel to city	  1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# ------------------------------------------------- #
# Number of combinations (Full Factorial)
# ------------------------------------------------- #
print(3 * 3 * 4 * 2 * 3 * 3)
# ------------------------------------------------- #
# Parameters of DCE
# ------------------------------------------------- #
# Vector:
## - number of elements is the number of attributes
## - values contain number of levels of each attribute
at.lvls <- c(3, 3, 4, 2, 3, 3)
# Coding options for categorical variables:
## "D" - Dummy-coded
## "E" - Effects-coded
## "C" - Continuously coded
c.type <- c("D", "D", "D", "D", "D", "D")
# Full factorial
Profiles(lvls = at.lvls, coding = c.type)
install.packages("shiny")
# Vector:
## - number of elements is the number of attributes
## - values contain number of levels of each attribute
at.lvls <- c(3, 3, 4, 2, 3, 3)
# Coding options for categorical variables:
## "D" - Dummy-coded
## "E" - Effects-coded
## "C" - Continuously coded
c.type <- c("D", "D", "D", "D", "D", "D")
# Full factorial
Profiles(lvls = at.lvls, coding = c.type)
## Save full factorial
full_factorial <- Profiles(lvls = at.lvls, coding = c.type)
View(full_factorial)
View(full_factorial)
# ------------------------------------------------- #
# Creating a design with a no-choice option
# ------------------------------------------------- #
# Make it reproducible
set.seed(123)
# Attributes and levels
lvls.nc <- c(3, 3, 4, 2, 3, 3)
# Dummy-coded
coding.nc <- c("D", "D", "D", "D", "D", "D")
# Alternative-specific constant
## We assume that the first two "non-no-choice
## alternatives" do not differ significantly,
## and differences in attractiveness will average
## out across the choice sets.
## However, the no-choice alternative may
## systematically differ from the presented
## alternatives.
alt.cte <- c(0, 0, 1)
# ------------------------------------------------- #
# Workshop Choice Experiments
# Estimation of DCEs with R
#
# Dave Balzer, Jürgen Schiener
# 20.01.2025
# ------------------------------------------------- #
# Install and load package "idefix"
install.packages("idefix")
library("idefix")
install.packages("shiny")
library("shiny")
# ------------------------------------------------- #
# Design with 6 attributes
# ------------------------------------------------- #
# Attribute	        Level
# ---------------------------------------
# Type of housing	  1. Single apartment
#                   2. Shared flat for 2
#                   3. Shares flat for 4
# ---------------------------------------
# Living space	    1. 15 m^2
#                   2. 20 m^2
#                   3. 25 m^2
# ---------------------------------------
# Rent	            1. 300€
#                   2. 350€
#                   3. 400€
#                   4. 450€
# ---------------------------------------
# Indiv. Bathroom	  1. No (shared)
#                   2. Yes (used individually)
# ---------------------------------------
# Travel to uni	    1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# Travel to city	  1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# ------------------------------------------------- #
# Number of combinations (Full Factorial)
# ------------------------------------------------- #
print(3 * 3 * 4 * 2 * 3 * 3)
# ------------------------------------------------- #
# Parameters of DCE
# ------------------------------------------------- #
# Vector:
## - number of elements is the number of attributes
## - values contain number of levels of each attribute
at.lvls <- c(3, 3, 4, 2, 3, 3)
# Coding options for categorical variables:
## "D" - Dummy-coded
## "E" - Effects-coded
## "C" - Continuously coded
c.type <- c("D", "D", "D", "D", "D", "D")
# Full factorial
Profiles(lvls = at.lvls, coding = c.type)
## Save full factorial
full_factorial <- Profiles(lvls = at.lvls, coding = c.type)
# ------------------------------------------------- #
# Creating a design with a no-choice option
# ------------------------------------------------- #
# Make it reproducible
set.seed(123)
# Attributes and levels
lvls.nc <- c(3, 3, 4, 2, 3, 3)
# Dummy-coded
coding.nc <- c("D", "D", "D", "D", "D", "D")
# Alternative-specific constant
## We assume that the first two "non-no-choice
## alternatives" do not differ significantly,
## and differences in attractiveness will average
## out across the choice sets.
## However, the no-choice alternative may
## systematically differ from the presented
## alternatives.
alt.cte <- c(0, 0, 1)
# Vector with priors
## Be extra cautious!
## List the priors of the levels of the attributes
## in the correct order and relative to the attributes
## respective reference category.
## Priors for the alternative-specific constants have
## to be included first.
m <- c(0, -0.14, -0.51, 0.35, 0.47, -0.4, -0.8, -1.2, 0.47, -0.32, -0.64, -0.25, -0.5)
# Heterogeneity of priors
v <- diag(length(m))
ps <- MASS::mvrnorm(n = 500, mu = m, Sigma = v)
## Priors for Alternative specific constants separately
## form priors for the levels -> list with two elements
ps <- list(ps[, 1:1], ps[, 2:13])
# Estimate design with the Coordinate Exchange Algorithm
D.nc_cea <- CEA(lvls = lvls.nc,
coding = coding.nc,
n.alts = 3,
n.sets = 60,
alt.cte = alt.cte,
par.draws = ps,
no.choice = TRUE,
best = TRUE)
# ------------------------------------------------- #
# Workshop Choice Experiments
# Estimation of DCEs with R
#
# Dave Balzer, Jürgen Schiener
# 20.01.2025
# ------------------------------------------------- #
# Install and load package "idefix"
install.packages("idefix")
library("idefix")
install.packages("shiny")
library("shiny")
# ------------------------------------------------- #
# Design with 6 attributes
# ------------------------------------------------- #
# Attribute	        Level
# ---------------------------------------
# Type of housing	  1. Single apartment
#                   2. Shared flat for 2
#                   3. Shares flat for 4
# ---------------------------------------
# Living space	    1. 15 m^2
#                   2. 20 m^2
#                   3. 25 m^2
# ---------------------------------------
# Rent	            1. 300€
#                   2. 350€
#                   3. 400€
#                   4. 450€
# ---------------------------------------
# Indiv. Bathroom	  1. No (shared)
#                   2. Yes (used individually)
# ---------------------------------------
# Travel to uni	    1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# Travel to city	  1. 10 Minutes
#                   2. 20 Minutes
#                   3. 30 Minutes
# ---------------------------------------
# ------------------------------------------------- #
# Number of combinations (Full Factorial)
# ------------------------------------------------- #
print(3 * 3 * 4 * 2 * 3 * 3)
# ------------------------------------------------- #
# Parameters of DCE
# ------------------------------------------------- #
# Vector:
## - number of elements is the number of attributes
## - values contain number of levels of each attribute
at.lvls <- c(3, 3, 4, 2, 3, 3)
# Coding options for categorical variables:
## "D" - Dummy-coded
## "E" - Effects-coded
## "C" - Continuously coded
c.type <- c("D", "D", "D", "D", "D", "D")
# Full factorial
Profiles(lvls = at.lvls, coding = c.type)
## Save full factorial
full_factorial <- Profiles(lvls = at.lvls, coding = c.type)
# ------------------------------------------------- #
# Creating a design with a no-choice option
# ------------------------------------------------- #
# Make it reproducible
set.seed(123)
# Attributes and levels
lvls.nc <- c(3, 3, 4, 2, 3, 3)
# Dummy-coded
coding.nc <- c("D", "D", "D", "D", "D", "D")
# Alternative-specific constant
## We assume that the first two "non-no-choice
## alternatives" do not differ significantly,
## and differences in attractiveness will average
## out across the choice sets.
## However, the no-choice alternative may
## systematically differ from the presented
## alternatives.
alt.cte <- c(0, 0, 1)
# Vector with priors
## Be extra cautious!
## List the priors of the levels of the attributes
## in the correct order and relative to the attributes
## respective reference category.
## Priors for the alternative-specific constants have
## to be included first.
m <- c(0, -0.14, -0.51, 0.35, 0.47, -0.4, -0.8, -1.2, 0.47, -0.32, -0.64, -0.25, -0.5)
install.packages("shiny")
# Estimate design with the Coordinate Exchange Algorithm
D.nc_cea <- CEA(lvls = lvls.nc,
coding = coding.nc,
n.alts = 3,
n.sets = 60,
alt.cte = alt.cte,
par.draws = ps,
no.choice = TRUE,
best = TRUE)
D.nc_cea
load("C:/Users/ru38fed/LRZ Sync+Share/PhD/06_Workshops_Conferences/25_01_München_Choice_Experimente/02 – Estimation of Experimental Design/2_DCE_Workspace.RData")
D.nc_cea
library(haven)
install.packages("haven")
data <- read_sav("L:\LS04\Forschungsprojekte\META-REP\Daten\ESS\ESS1\ESS1e01.sav")  # Import SPSS file
data <- read_sav("L:/LS04/Forschungsprojekte/META-REP/Daten/ESS/ESS1/ESS1e01.sav")  # Import SPSS file
haven
cd "C:\Users\ru38fed\Desktop\Rostock\rostock2025-danielkraehmer"
setwd("C:/Users/ru38fed/Desktop/Rostock/rostock2025-danielkraehmer")
quarto render
install.packages("quarto")
quarto::quarto_render("index.qmd")
quarto render
